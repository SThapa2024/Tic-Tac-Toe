<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic Tac Toe with AI or Human</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #42C6C2;
        }

        .game-board {
            display: grid;
            grid-template-columns: repeat(3, 100px);
            grid-template-rows: repeat(3, 100px);
            gap: 5px;
        }

        .cell {
            width: 100px;
            height: 100px;
            background-color: #fff;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 2rem;
            cursor: pointer;
            border: 1px solid #333;
            transition: background-color 0.3s;
        }

        .cell:hover {
            background-color: #EBEE42;
        }

        .status {
            margin-top: 20px;
            font-size: 1.5rem;
            text-align: center;
        }

        .button {
            margin-top: 20px;
            padding: 10px 20px;
            font-size: 1rem;
            cursor: pointer;
        }

        .options {
            margin-bottom: 20px;
        }
    </style>
</head>
<body>

    <div class="options">
        <button class="button" onclick="setGameMode('AI')">Play with AI</button>
        <button class="button" onclick="setGameMode('Human')">Play with Human</button>
    </div>

    <div class="game-container" style="display: none;">
        <div class="game-board" id="board">
            <!-- Cells will be created by JavaScript -->
        </div>
        <div class="status" id="status">Player X's turn</div>
        <button class="button" onclick="resetGame()">Reset Game</button>
        <button class="button" onclick="backToMenu()">Back to Main Menu</button>
    </div>

    <script>
        let board;
        let currentPlayer = "X";
        let gameActive = true;
        let gameMode = "AI";  // Default mode is playing against AI

        const statusDisplay = document.getElementById("status");
        const boardElement = document.getElementById("board");
        const gameContainer = document.querySelector(".game-container");
        const optionsContainer = document.querySelector(".options");

        // Set game mode (AI or Human)
        function setGameMode(mode) {
            gameMode = mode;
            optionsContainer.style.display = "none";
            gameContainer.style.display = "block";
            initGame();
        }

        // Back to Main Menu to select player mode again
        function backToMenu() {
            gameContainer.style.display = "none";
            optionsContainer.style.display = "block";
        }

        // Initialize the board
        function initGame() {
            board = ["", "", "", "", "", "", "", "", ""];
            boardElement.innerHTML = "";
            gameActive = true;

            for (let i = 0; i < 9; i++) {
                const cell = document.createElement("div");
                cell.classList.add("cell");
                cell.setAttribute("data-index", i);
                cell.addEventListener("click", handleCellClick);
                boardElement.appendChild(cell);
            }

            statusDisplay.textContent = `Player ${currentPlayer}'s turn`;
        }

        // Handle cell click
        function handleCellClick(event) {
            const clickedCell = event.target;
            const clickedCellIndex = clickedCell.getAttribute("data-index");

            if (board[clickedCellIndex] !== "" || !gameActive || (gameMode === "AI" && currentPlayer === "O")) {
                return;
            }

            board[clickedCellIndex] = currentPlayer;
            clickedCell.textContent = currentPlayer;

            if (checkWinner()) {
                statusDisplay.textContent = `Player ${currentPlayer} wins!`;
                gameActive = false;
                return;
            } else if (board.every(cell => cell !== "")) {
                statusDisplay.textContent = "It's a draw!";
                gameActive = false;
                return;
            }

            // Switch player
            currentPlayer = currentPlayer === "X" ? "O" : "X";
            statusDisplay.textContent = `Player ${currentPlayer}'s turn`;

            // If AI is enabled and it's the AI's turn
            if (gameMode === "AI" && currentPlayer === "O") {
                setTimeout(() => {
                    bestMove();
                }, 500); // Add delay to simulate AI thinking
            }
        }

        // Minimax algorithm
        function minimax(board, depth, isMaximizing) {
            const scores = {
                X: -1,
                O: 1,
                tie: 0
            };

            const winner = checkWinnerForMinimax();
            if (winner) {
                return scores[winner];
            }

            if (isMaximizing) {
                let bestScore = -Infinity;
                for (let i = 0; i < board.length; i++) {
                    if (board[i] === "") {
                        board[i] = "O";
                        let score = minimax(board, depth + 1, false);
                        board[i] = "";
                        bestScore = Math.max(score, bestScore);
                    }
                }
                return bestScore;
            } else {
                let bestScore = Infinity;
                for (let i = 0; i < board.length; i++) {
                    if (board[i] === "") {
                        board[i] = "X";
                        let score = minimax(board, depth + 1, true);
                        board[i] = "";
                        bestScore = Math.min(score, bestScore);
                    }
                }
                return bestScore;
            }
        }

        // AI to make its move using Minimax
        function bestMove() {
            let bestScore = -Infinity;
            let move;
            for (let i = 0; i < board.length; i++) {
                if (board[i] === "") {
                    board[i] = "O";
                    let score = minimax(board, 0, false);
                    board[i] = "";
                    if (score > bestScore) {
                        bestScore = score;
                        move = i;
                    }
                }
            }
            board[move] = "O";
            document.querySelector(`[data-index='${move}']`).textContent = "O";

            if (checkWinner()) {
                statusDisplay.textContent = `Player O wins!`;
                gameActive = false;
            } else if (board.every(cell => cell !== "")) {
                statusDisplay.textContent = "It's a draw!";
                gameActive = false;
            } else {
                currentPlayer = "X";
                statusDisplay.textContent = `Player ${currentPlayer}'s turn`;
            }
        }

        // Check for winner
        function checkWinner() {
            const winningCombinations = [
                [0, 1, 2],
                [3, 4, 5],
                [6, 7, 8],
                [0, 3, 6],
                [1, 4, 7],
                [2, 5, 8],
                [0, 4, 8],
                [2, 4, 6]
            ];

            for (let i = 0; i < winningCombinations.length; i++) {
                const [a, b, c] = winningCombinations[i];
                if (board[a] && board[a] === board[b] && board[a] === board[c]) {
                    return true;
                }
            }

            return false;
        }

        // Check for winner for Minimax
        function checkWinnerForMinimax() {
            const winningCombinations = [
                [0, 1, 2],
                [3, 4, 5],
                [6, 7, 8],
                [0, 3, 6],
                [1, 4, 7],
                [2, 5, 8],
                [0, 4, 8],
                [2, 4, 6]
            ];

            for (let i = 0; i < winningCombinations.length; i++) {
                const [a, b, c] = winningCombinations[i];
                if (board[a] && board[a] === board[b] && board[a] === board[c]) {
                    return board[a];
                }
            }

            if (board.every(cell => cell !== "")) {
                return "tie";
            }

            return null;
        }

        // Reset the game
        function resetGame() {
            currentPlayer = "X";
            initGame();
        }

        // Initialize the game when the page loads
        window.onload = initGame;
    </script>

</body>
</html>
